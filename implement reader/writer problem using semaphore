packagereaders_writers;

importjava.util.concurrent.Semaphore;

publicclassReadWriteProb {

	static Semaphore readLock = new Semaphore(1);
	static Semaphore writeLock = new Semaphore(1);
	staticintreadCount = 0;

	staticclass Read implements Runnable {
		@Override
		publicvoid run() {
			try {

				readLock.acquire();
				readCount++;
				if (readCount == 1) {
					writeLock.acquire();
				}
				readLock.release();

				System.out.println("Thread " + Thread.currentThread().getName() + " is READING");
				Thread.sleep(1000);
				System.out.println("Thread " + Thread.currentThread().getName() + " has FINISHED READING");

				readLock.acquire();
				readCount--;
				if (readCount == 0) {
					writeLock.release();
				}
				readLock.release();
			} catch (InterruptedExceptione) {
				System.out.println(e.getMessage());
			}
		}
	}

	staticclass Write implements Runnable {
		@Override
		publicvoid run() {
			try {
				writeLock.acquire();
				System.out.println("Thread " + Thread.currentThread().getName() + " is WRITING");
				Thread.sleep(1000);
				System.out.println("Thread " + Thread.currentThread().getName() + " has finished WRITING");
				writeLock.release();
			} catch (InterruptedExceptione) {
				System.out.println(e.getMessage());
			}
		}
	}

	publicstaticvoid main(String[] args){
		
		Read read = new Read();
		Write write = new Write();
		Thread t1 = new Thread(read);
		t1.setName("thread1");
		Thread t2 = new Thread(read);
		t2.setName("thread2");
		Thread t3 = new Thread(write);
		t3.setName("thread3");
		Thread t4 = new Thread(read);
		t4.setName("thread4");
		Thread t5 = new Thread(write);
		t5.setName("thread5");
		t1.start();
		t3.start();
		t2.start();
		t4.start();
		t5.start();
	}
}
